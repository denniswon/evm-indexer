type Block {
  hash: String!
  number: String!
  time: String!
  parentHash: String!
  difficulty: String!
  gasUsed: String!
  gasLimit: String!
  nonce: String!
  miner: String!
  size: Float!
  stateRootHash: String!
  uncleHash: String!
  txRootHash: String!
  receiptRootHash: String!
  extraData: String!
}

type Transaction {
  hash: String!
  from: String!
  to: String!
  contract: String!
  value: String!
  data: String!
  gas: String!
  gasPrice: String!
  cost: String!
  nonce: String!
  state: String!
  blockHash: String!
}

type Event {
  origin: String!
  index: String!
  topics: [String!]!
  data: String!
  txHash: String!
  blockHash: String!
}

type Query {
  blockByHash(hash: String!): Block!
  blockByNumber(number: String!): Block!
  blocksByNumberRange(from: String!, to: String!): [Block!]!
  blocksByTimeRange(from: String!, to: String!): [Block!]!

  # -- transaction related methods, start
  transaction(hash: String!): Transaction!
  
  transactionCountByBlockHash(hash: String!): Int!
  transactionsByBlockHash(hash: String!): [Transaction!]!
  
  transactionCountByBlockNumber(number: String!): Int!
  transactionsByBlockNumber(number: String!): [Transaction!]!
  
  transactionCountFromAccountByNumberRange(account: String!, from: String!, to: String!): Int!
  transactionsFromAccountByNumberRange(account: String!, from: String!, to: String!): [Transaction!]!
  
  transactionCountFromAccountByTimeRange(account: String!, from: String!, to: String!): Int!
  transactionsFromAccountByTimeRange(account: String!, from: String!, to: String!): [Transaction!]!
  
  transactionCountToAccountByNumberRange(account: String!, from: String!, to: String!): Int!
  transactionsToAccountByNumberRange(account: String!, from: String!, to: String!): [Transaction!]!

  transactionCountToAccountByTimeRange(account: String!, from: String!, to: String!): Int!
  transactionsToAccountByTimeRange(account: String!, from: String!, to: String!): [Transaction!]!

  transactionCountBetweenAccountsByNumberRange(fromAccount: String!, toAccount: String!, from: String!, to: String!): Int!
  transactionsBetweenAccountsByNumberRange(fromAccount: String!, toAccount: String!, from: String!, to: String!): [Transaction!]!

  transactionCountBetweenAccountsByTimeRange(fromAccount: String!, toAccount: String!, from: String!, to: String!): Int!
  transactionsBetweenAccountsByTimeRange(fromAccount: String!, toAccount: String!, from: String!, to: String!): [Transaction!]!

  contractsCreatedFromAccountByNumberRange(account: String!, from: String!, to: String!): [Transaction!]!
  contractsCreatedFromAccountByTimeRange(account: String!, from: String!, to: String!): [Transaction!]!
  transactionFromAccountWithNonce(account: String!, nonce: String!): Transaction!
  # transaction related methods, end

  eventsFromContractByNumberRange(contract: String!, from: String!, to: String!): [Event!]!
  eventsFromContractByTimeRange(contract: String!, from: String!, to: String!): [Event!]!
  eventsByBlockHash(hash: String!): [Event!]!
  eventsByTxHash(hash: String!): [Event!]!
  eventsFromContractWithTopicsByNumberRange(contract: String!, from: String!, to: String!, topics: [String!]!): [Event!]!
  eventsFromContractWithTopicsByTimeRange(contract: String!, from: String!, to: String!, topics: [String!]!): [Event!]!
  lastXEventsFromContract(contract: String!, x: Int!): [Event!]!
  eventByBlockHashAndLogIndex(hash: String!, index: String!): Event!
  eventByBlockNumberAndLogIndex(number: String!, index: String!): Event!
}
